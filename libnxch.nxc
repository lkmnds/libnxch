/*
 * libnxch - helper for NXC
 * @authors Luna Mendes
*/

#define E	2.718281828459045235360287471352662498L

int DRW_NORMAL = DRAW_OPT_NORMAL;
int DRW_CLEAR = DRAW_OPT_CLEAR_WHOLE_SCREEN;

#define SENSOR_ULTRASONIC 2048
#define SENSOR_TEMPERATURE 1024

int CenterText(const string text){
	int len = StrLen(text);
	len = (len * 5);
	len = (100 - len);
	len = (len / 2);
	len = (len - 5);
	return len;
}

char CenterTextOut(int y, string text, unsigned long options = DRAW_OPT_NORMAL){
	int len = CenterText(text);
	return TextOut(len, y, text, options);
}

void write_text(int x, int y, string text, bool clear = false)
{
	DrawTextType dt;
	dt.Location.X = x;
	dt.Location.Y = y;
	dt.Text = text;
	if(clear){
		dt.Options = DRAW_OPT_NORMAL;
	}else{
		dt.Options = DRAW_OPT_CLEAR_WHOLE_SCREEN; //clear before appear
	}
	SysDrawText(dt);
}

void write_line(int y, string text, bool clear = false){
	write_text(0, y, text, clear);
}

void write_center(int y, string text, bool clear = false){
	int len = CenterText(text);
	byte options = DRAW_OPT_NORMAL;

	if(clear){
		options = DRAW_OPT_CLEAR_WHOLE_SCREEN;
	}

	write_text(len, y, text, options);
}

void lib_panic(string err){
	while(true){
		CenterTextOut(LCD_LINE1, "sdlib");
		CenterTextOut(LCD_LINE2, err);
	}
}

void assert(int expression){
	if(expression){
		return;
	}else{
		lib_panic("ASSERT_ERROR");
	}
}

int floor(float x){
	return atoi(NumToStr(x));
}

int ceil(float x){
	int a = atoi(NumToStr(x));
	if(a == x){
		return a;
	}else{
		return a+1;
	}
}

int gcd(int a, int b){
	int c;
	while(b){
		c = a%b;
		a = b;
		b = c;
	}
	return a;
}

int lcm(int a, int b){
	return a/gcd(a, b) * b;
}

int factorial(int n) {
	int f = 1;
	for(int i=1;i<=n;i++) {
		f *= i;
	}
	return f;
}

char init_sensor_temp(int port, byte config){
	return ConfigureTemperatureSensor(port, config);
}

void init_sensor(int sensor_type, int port, byte config){
	if(sensor_type == SENSOR_TEMPERATURE){
		ConfigureTemperatureSensor(port, config);
	}else if(sensor_type == SENSOR_ULTRASONIC){
		SetSensorUltrasonic(port);
	}
}

task main(){

}
